// Display & Flexbox Utilities

// Breakpoints
$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

// Mixin for breakpoints
@mixin media-breakpoint-up($name) {
  $min: map-get($grid-breakpoints, $name);
  @if $min != 0 {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Display utilities
.d-none { display: none !important; }
.d-inline { display: inline !important; }
.d-inline-block { display: inline-block !important; }
.d-block { display: block !important; }
.d-grid { display: grid !important; }
.d-table { display: table !important; }
.d-table-row { display: table-row !important; }
.d-table-cell { display: table-cell !important; }
.d-flex { display: flex !important; }
.d-inline-flex { display: inline-flex !important; }

// Responsive display utilities
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: if($breakpoint == xs, "", "-#{$breakpoint}");
    
    .d#{$infix}-none { display: none !important; }
    .d#{$infix}-inline { display: inline !important; }
    .d#{$infix}-inline-block { display: inline-block !important; }
    .d#{$infix}-block { display: block !important; }
    .d#{$infix}-grid { display: grid !important; }
    .d#{$infix}-table { display: table !important; }
    .d#{$infix}-table-row { display: table-row !important; }
    .d#{$infix}-table-cell { display: table-cell !important; }
    .d#{$infix}-flex { display: flex !important; }
    .d#{$infix}-inline-flex { display: inline-flex !important; }
  }
}

// Flexbox utilities
.flex-fill { flex: 1 1 auto !important; }
.flex-row { flex-direction: row !important; }
.flex-column { flex-direction: column !important; }
.flex-row-reverse { flex-direction: row-reverse !important; }
.flex-column-reverse { flex-direction: column-reverse !important; }

.flex-grow-0 { flex-grow: 0 !important; }
.flex-grow-1 { flex-grow: 1 !important; }

.flex-shrink-0 { flex-shrink: 0 !important; }
.flex-shrink-1 { flex-shrink: 1 !important; }

.flex-wrap { flex-wrap: wrap !important; }
.flex-nowrap { flex-wrap: nowrap !important; }
.flex-wrap-reverse { flex-wrap: wrap-reverse !important; }

// Gap utilities
.gap-0 { gap: 0 !important; }
.gap-1 { gap: 0.25rem !important; }
.gap-2 { gap: 0.5rem !important; }
.gap-3 { gap: 1rem !important; }
.gap-4 { gap: 1.5rem !important; }
.gap-5 { gap: 3rem !important; }

.row-gap-0 { row-gap: 0 !important; }
.row-gap-1 { row-gap: 0.25rem !important; }
.row-gap-2 { row-gap: 0.5rem !important; }
.row-gap-3 { row-gap: 1rem !important; }
.row-gap-4 { row-gap: 1.5rem !important; }
.row-gap-5 { row-gap: 3rem !important; }

.column-gap-0 { column-gap: 0 !important; }
.column-gap-1 { column-gap: 0.25rem !important; }
.column-gap-2 { column-gap: 0.5rem !important; }
.column-gap-3 { column-gap: 1rem !important; }
.column-gap-4 { column-gap: 1.5rem !important; }
.column-gap-5 { column-gap: 3rem !important; }

// Justify content
.justify-content-start { justify-content: flex-start !important; }
.justify-content-end { justify-content: flex-end !important; }
.justify-content-center { justify-content: center !important; }
.justify-content-between { justify-content: space-between !important; }
.justify-content-around { justify-content: space-around !important; }
.justify-content-evenly { justify-content: space-evenly !important; }

// Justify items (for grid)
.justify-items-start { justify-items: start !important; }
.justify-items-end { justify-items: end !important; }
.justify-items-center { justify-items: center !important; }
.justify-items-stretch { justify-items: stretch !important; }

// Justify self
.justify-self-auto { justify-self: auto !important; }
.justify-self-start { justify-self: start !important; }
.justify-self-end { justify-self: end !important; }
.justify-self-center { justify-self: center !important; }
.justify-self-stretch { justify-self: stretch !important; }

// Align items
.align-items-start { align-items: flex-start !important; }
.align-items-end { align-items: flex-end !important; }
.align-items-center { align-items: center !important; }
.align-items-baseline { align-items: baseline !important; }
.align-items-stretch { align-items: stretch !important; }

// Align content
.align-content-start { align-content: flex-start !important; }
.align-content-end { align-content: flex-end !important; }
.align-content-center { align-content: center !important; }
.align-content-between { align-content: space-between !important; }
.align-content-around { align-content: space-around !important; }
.align-content-stretch { align-content: stretch !important; }

// Align self
.align-self-auto { align-self: auto !important; }
.align-self-start { align-self: flex-start !important; }
.align-self-end { align-self: flex-end !important; }
.align-self-center { align-self: center !important; }
.align-self-baseline { align-self: baseline !important; }
.align-self-stretch { align-self: stretch !important; }

// Place items (for grid)
.place-items-start { place-items: start !important; }
.place-items-end { place-items: end !important; }
.place-items-center { place-items: center !important; }
.place-items-stretch { place-items: stretch !important; }

// Place content (for grid)
.place-content-start { place-content: start !important; }
.place-content-end { place-content: end !important; }
.place-content-center { place-content: center !important; }
.place-content-between { place-content: space-between !important; }
.place-content-around { place-content: space-around !important; }
.place-content-evenly { place-content: space-evenly !important; }
.place-content-stretch { place-content: stretch !important; }

// Place self
.place-self-auto { place-self: auto !important; }
.place-self-start { place-self: start !important; }
.place-self-end { place-self: end !important; }
.place-self-center { place-self: center !important; }
.place-self-stretch { place-self: stretch !important; }

// Float utilities
.float-left { float: left !important; }
.float-right { float: right !important; }
.float-none { float: none !important; }

// Clear utilities
.clear-left { clear: left !important; }
.clear-right { clear: right !important; }
.clear-both { clear: both !important; }
.clear-none { clear: none !important; }

// Clearfix
.clearfix {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

// Object fit utilities
.object-contain { object-fit: contain !important; }
.object-cover { object-fit: cover !important; }
.object-fill { object-fit: fill !important; }
.object-none { object-fit: none !important; }
.object-scale-down { object-fit: scale-down !important; }

// Object position utilities
.object-bottom { object-position: bottom !important; }
.object-center { object-position: center !important; }
.object-left { object-position: left !important; }
.object-left-bottom { object-position: left bottom !important; }
.object-left-top { object-position: left top !important; }
.object-right { object-position: right !important; }
.object-right-bottom { object-position: right bottom !important; }
.object-right-top { object-position: right top !important; }
.object-top { object-position: top !important; }

// Overflow utilities
.overflow-auto { overflow: auto !important; }
.overflow-hidden { overflow: hidden !important; }
.overflow-clip { overflow: clip !important; }
.overflow-visible { overflow: visible !important; }
.overflow-scroll { overflow: scroll !important; }

.overflow-x-auto { overflow-x: auto !important; }
.overflow-x-hidden { overflow-x: hidden !important; }
.overflow-x-clip { overflow-x: clip !important; }
.overflow-x-visible { overflow-x: visible !important; }
.overflow-x-scroll { overflow-x: scroll !important; }

.overflow-y-auto { overflow-y: auto !important; }
.overflow-y-hidden { overflow-y: hidden !important; }
.overflow-y-clip { overflow-y: clip !important; }
.overflow-y-visible { overflow-y: visible !important; }
.overflow-y-scroll { overflow-y: scroll !important; }

// Overscroll behavior
.overscroll-auto { overscroll-behavior: auto !important; }
.overscroll-contain { overscroll-behavior: contain !important; }
.overscroll-none { overscroll-behavior: none !important; }

.overscroll-x-auto { overscroll-behavior-x: auto !important; }
.overscroll-x-contain { overscroll-behavior-x: contain !important; }
.overscroll-x-none { overscroll-behavior-x: none !important; }

.overscroll-y-auto { overscroll-behavior-y: auto !important; }
.overscroll-y-contain { overscroll-behavior-y: contain !important; }
.overscroll-y-none { overscroll-behavior-y: none !important; }

// Responsive flexbox utilities
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: if($breakpoint == xs, "", "-#{$breakpoint}");
    
    .flex#{$infix}-row { flex-direction: row !important; }
    .flex#{$infix}-column { flex-direction: column !important; }
    .flex#{$infix}-row-reverse { flex-direction: row-reverse !important; }
    .flex#{$infix}-column-reverse { flex-direction: column-reverse !important; }
    
    .flex#{$infix}-wrap { flex-wrap: wrap !important; }
    .flex#{$infix}-nowrap { flex-wrap: nowrap !important; }
    .flex#{$infix}-wrap-reverse { flex-wrap: wrap-reverse !important; }
    
    .justify-content#{$infix}-start { justify-content: flex-start !important; }
    .justify-content#{$infix}-end { justify-content: flex-end !important; }
    .justify-content#{$infix}-center { justify-content: center !important; }
    .justify-content#{$infix}-between { justify-content: space-between !important; }
    .justify-content#{$infix}-around { justify-content: space-around !important; }
    .justify-content#{$infix}-evenly { justify-content: space-evenly !important; }
    
    .align-items#{$infix}-start { align-items: flex-start !important; }
    .align-items#{$infix}-end { align-items: flex-end !important; }
    .align-items#{$infix}-center { align-items: center !important; }
    .align-items#{$infix}-baseline { align-items: baseline !important; }
    .align-items#{$infix}-stretch { align-items: stretch !important; }
    
    .float#{$infix}-left { float: left !important; }
    .float#{$infix}-right { float: right !important; }
    .float#{$infix}-none { float: none !important; }
  }
}