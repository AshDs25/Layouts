// Spacing Utilities (Margin & Padding)

// Variables
$spacer: 1rem;
$spacers: (
  0: 0,
  px: 1px,
  0_5: $spacer * 0.125,  // Changed from 0\.5 to 0_5
  1: $spacer * 0.25,
  1_5: $spacer * 0.375,  // Changed from 1\.5 to 1_5
  2: $spacer * 0.5,
  2_5: $spacer * 0.625,  // Changed from 2\.5 to 2_5
  3: $spacer * 0.75,
  3_5: $spacer * 0.875,  // Changed from 3\.5 to 3_5
  4: $spacer,
  5: $spacer * 1.25,
  6: $spacer * 1.5,
  7: $spacer * 1.75,
  8: $spacer * 2,
  9: $spacer * 2.25,
  10: $spacer * 2.5,
  11: $spacer * 2.75,
  12: $spacer * 3,
  14: $spacer * 3.5,
  16: $spacer * 4,
  20: $spacer * 5,
  24: $spacer * 6,
  28: $spacer * 7,
  32: $spacer * 8,
  36: $spacer * 9,
  40: $spacer * 10,
  44: $spacer * 11,
  48: $spacer * 12,
  52: $spacer * 13,
  56: $spacer * 14,
  60: $spacer * 15,
  64: $spacer * 16,
  72: $spacer * 18,
  80: $spacer * 20,
  96: $spacer * 24,
  auto: auto
);

$grid-breakpoints: (
  xs: 0,
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px
);

// Import map module for modern SCSS
@use "sass:map";

// Mixin for breakpoints
@mixin media-breakpoint-up($name) {
  $min: map.get($grid-breakpoints, $name);
  @if $min != 0 {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Margin and Padding utilities
@each $prop, $abbrev in (margin: m, padding: p) {
  @each $size, $length in $spacers {
    .#{$abbrev}-#{$size} { #{$prop}: $length !important; }
    .#{$abbrev}t-#{$size} { #{$prop}-top: $length !important; }
    .#{$abbrev}r-#{$size} { #{$prop}-right: $length !important; }
    .#{$abbrev}b-#{$size} { #{$prop}-bottom: $length !important; }
    .#{$abbrev}l-#{$size} { #{$prop}-left: $length !important; }
    .#{$abbrev}x-#{$size} {
      #{$prop}-left: $length !important;
      #{$prop}-right: $length !important;
    }
    .#{$abbrev}y-#{$size} {
      #{$prop}-top: $length !important;
      #{$prop}-bottom: $length !important;
    }
  }
}

// Negative margins only
@each $size, $length in $spacers {
  @if $size != auto {
    .-m-#{$size} { margin: -$length !important; }
    .-mt-#{$size} { margin-top: -$length !important; }
    .-mr-#{$size} { margin-right: -$length !important; }
    .-mb-#{$size} { margin-bottom: -$length !important; }
    .-ml-#{$size} { margin-left: -$length !important; }
    .-mx-#{$size} {
      margin-left: -$length !important;
      margin-right: -$length !important;
    }
    .-my-#{$size} {
      margin-top: -$length !important;
      margin-bottom: -$length !important;
    }
  }
}

// Space between utilities (for direct children)
@each $size, $length in $spacers {
  @if $size != auto {
    .space-x-#{$size} > :not([hidden]) ~ :not([hidden]) {
      margin-right: 0 !important;
      margin-left: $length !important;
    }
    
    .space-y-#{$size} > :not([hidden]) ~ :not([hidden]) {
      margin-top: $length !important;
      margin-bottom: 0 !important;
    }
    
    .-space-x-#{$size} > :not([hidden]) ~ :not([hidden]) {
      margin-right: 0 !important;
      margin-left: -$length !important;
    }
    
    .-space-y-#{$size} > :not([hidden]) ~ :not([hidden]) {
      margin-top: -$length !important;
      margin-bottom: 0 !important;
    }
  }
}

// Space reverse utilities
.space-x-reverse > :not([hidden]) ~ :not([hidden]) {
  --tw-space-x-reverse: 1;
}

.space-y-reverse > :not([hidden]) ~ :not([hidden]) {
  --tw-space-y-reverse: 1;
}

// Responsive spacing utilities
@each $breakpoint in map.keys($grid-breakpoints) {
  @if $breakpoint != xs {
    @include media-breakpoint-up($breakpoint) {
      @each $prop, $abbrev in (margin: m, padding: p) {
        @each $size, $length in $spacers {
          .#{$abbrev}-#{$breakpoint}-#{$size} { #{$prop}: $length !important; }
          .#{$abbrev}t-#{$breakpoint}-#{$size} { #{$prop}-top: $length !important; }
          .#{$abbrev}r-#{$breakpoint}-#{$size} { #{$prop}-right: $length !important; }
          .#{$abbrev}b-#{$breakpoint}-#{$size} { #{$prop}-bottom: $length !important; }
          .#{$abbrev}l-#{$breakpoint}-#{$size} { #{$prop}-left: $length !important; }
          .#{$abbrev}x-#{$breakpoint}-#{$size} {
            #{$prop}-left: $length !important;
            #{$prop}-right: $length !important;
          }
          .#{$abbrev}y-#{$breakpoint}-#{$size} {
            #{$prop}-top: $length !important;
            #{$prop}-bottom: $length !important;
          }
        }
      }
      
      // Responsive negative margins
      @each $size, $length in $spacers {
        @if $size != auto {
          .-m-#{$breakpoint}-#{$size} { margin: -$length !important; }
          .-mt-#{$breakpoint}-#{$size} { margin-top: -$length !important; }
          .-mr-#{$breakpoint}-#{$size} { margin-right: -$length !important; }
          .-mb-#{$breakpoint}-#{$size} { margin-bottom: -$length !important; }
          .-ml-#{$breakpoint}-#{$size} { margin-left: -$length !important; }
          .-mx-#{$breakpoint}-#{$size} {
            margin-left: -$length !important;
            margin-right: -$length !important;
          }
          .-my-#{$breakpoint}-#{$size} {
            margin-top: -$length !important;
            margin-bottom: -$length !important;
          }
        }
      }
      
      // Responsive space utilities
      @each $size, $length in $spacers {
        @if $size != auto {
          .space-x-#{$breakpoint}-#{$size} > :not([hidden]) ~ :not([hidden]) {
            margin-right: 0 !important;
            margin-left: $length !important;
          }
          
          .space-y-#{$breakpoint}-#{$size} > :not([hidden]) ~ :not([hidden]) {
            margin-top: $length !important;
            margin-bottom: 0 !important;
          }
        }
      }
    }
  }
}